package paas.rest.endpoints;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import paas.rest.service.FileSystemStorageService;
import paas.shared.Links;

import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.io.IOException;
import java.io.Writer;
import java.net.URI;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.jar.JarFile;

import static paas.rest.service.FileSystemStorageService.DESKTOP_CLIENT_JAR_NAME;
import static paas.shared.BuildTime.readBuildTime;

@RestController
public class DesktopClientEndpoint {

    @Autowired
    private FileSystemStorageService fileSystemStorageService;

    @GetMapping(Links.PAAS_DESKTOP_CLIENT_JAR)
    public ResponseEntity<FileSystemResource> getDesktopClient() {
        File desktopClientJar = fileSystemStorageService.getDesktopClientJar();
        if(desktopClientJar.exists())
            return ResponseEntity.ok()
                    .contentLength(desktopClientJar.length())
                    .contentType(MediaType.parseMediaType("application/java-archive"))
                    .body(new FileSystemResource(desktopClientJar));
        else throw new IllegalStateException("Call admin and tell him to upload desktop client");
    }

    @GetMapping(Links.DESKTOP_CLIENT_BUILD_TIMESTAMP)
    public long getDesktopClientLastModified() throws IOException {
        try(JarFile jarFile = new JarFile(fileSystemStorageService.getDesktopClientJar())) {
            return readBuildTime(jarFile.getManifest());
        }
    }

    @PostMapping(Links.ADMIN_UPLOAD_DESKTOP_CLIENT)
    public String uploadDesktopClient(@RequestParam("jarFile") MultipartFile file, HttpServletRequest req) throws IOException, InterruptedException {
        String jarFileName = file.getOriginalFilename();
        if(!DESKTOP_CLIENT_JAR_NAME.equals(jarFileName)) throw new IllegalArgumentException("Expected " + DESKTOP_CLIENT_JAR_NAME);
        fileSystemStorageService.saveDesktopClientJar(file);
        addServerInfo(fileSystemStorageService.getDesktopClientJar(), ServerUrl.getServerUrl(req));
        return "OK";
    }

    //add synchronization: noone should be able to download desktop jar while its being adjusted
    private void addServerInfo(File desktopClientJar, String serverUrl) throws IOException {
        Path path = desktopClientJar.toPath();
        URI uri = URI.create("jar:" + path.toUri());
        Map<String, String> env = new HashMap<>();
        env.put("create", "true");
        try (FileSystem fs = FileSystems.newFileSystem(uri, env))
        {
            Path serverInfo = fs.getPath("/BOOT-INF/classes/server.properties");
            try (Writer writer = Files.newBufferedWriter(serverInfo, StandardCharsets.UTF_8, StandardOpenOption.CREATE)) {
                Properties p = new Properties();
                p.setProperty("server.url", serverUrl);
                p.store(writer, "Generated by the server");
            }
        }
    }
}
